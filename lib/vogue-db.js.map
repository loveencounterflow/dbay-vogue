{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/vogue-db.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DBAY-VOGUE/DB'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPATH                      = require 'path'\nGUY                       = require 'guy'\n# { HTMLISH: ITXH }         = require 'intertext'\n# URL                       = require 'url'\n# { Html }                  = require './html'\n{ DBay }                  = require 'dbay'\n{ SQL }                   = DBay\n{ Vogue_common_mixin }    = require './vogue-common-mixin'\nH                         = require './helpers'\nXXX_cfg_replacement =\n  chart_history_length: 20\n\n\n#===========================================================================================================\nclass @Vogue_db extends Vogue_common_mixin()\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( cfg ) ->\n    super()\n    @cfg        = { @defaults.vogue_db_constructor_cfg..., cfg..., }\n    @cfg.db    ?= new DBay()\n    @types.validate.vogue_db_constructor_cfg @cfg\n    { db,     } = GUY.obj.pluck_with_fallback @cfg, null, 'db';     GUY.props.hide @, 'db',     db\n    @cfg        = GUY.lft.freeze @cfg\n    #.......................................................................................................\n    @db.create_stdlib()\n    @_set_variables?()\n    @_create_sql_functions?()\n    @_procure_infrastructure?()\n    @_compile_sql?()\n    GUY.props.hide @, 'cache', { get_html_for: {}, }\n    @hub = H.property_pending\n    #.......................................................................................................\n    return undefined\n\n\n  #=========================================================================================================\n  #\n  #---------------------------------------------------------------------------------------------------------\n  # _set_variables: ->\n  #   @db.setv 'allow_change_on_mirror', 0\n\n  #---------------------------------------------------------------------------------------------------------\n  _create_sql_functions: ->\n    { prefix } = @cfg\n    #-------------------------------------------------------------------------------------------------------\n    @db.create_function\n      name:           prefix + '_get_html_from_purpose'\n      deterministic:  true\n      varargs:        false\n      call:           ( purpose, dsk, fields ) =>\n        @types.validate.nonempty_text purpose\n        @types.validate_optional.text fields\n        #...................................................................................................\n        ### TAINT use caching method, hide implementation details ###\n        unless ( method = @cache.get_html_for[ purpose ] )?\n          scraper     = @hub.scrapers._scraper_from_dsk dsk\n          method_name = \"html_from_#{purpose}\"\n          unless ( method = scraper[ method_name ] )?\n            throw new Error \"^dbay-scraper@1^ scraper has no method #{rpr method_name}\"\n          @cache.get_html_for[ method_name ] = method\n        #...................................................................................................\n        fields = JSON.parse fields if fields?\n        return method.call scraper, fields\n    #-------------------------------------------------------------------------------------------------------\n    XXX_count = 0\n    @db.create_function\n      name:           prefix + '_sparkline_data_from_raw_trend'\n      deterministic:  true\n      varargs:        false\n      call:           ( trend_json, sid_min, sid_max ) =>\n        ###\n        `sid`: Session ID\n        `sid_min`: earliest session ID in DB for the current datasource\n\n        ###\n        trend               = JSON.parse trend_json\n        R                   = []\n        dense_trend         = []\n        csid_min            = Math.max 0, ( sid_min - sid_max ) + XXX_cfg_replacement.chart_history_length\n        csid_max            = XXX_cfg_replacement.chart_history_length\n        first_csid          = null\n        last_csid           = null\n        for [ sid, rank, ] in trend\n          csid = ( sid - sid_max ) + csid_max\n          continue if csid < 0\n          dense_trend[ csid ]  = rank\n        last_sid            = sid\n        status_prv          = 'missing'\n        status_now          = 'first'\n        for rank, csid in dense_trend\n          unless rank?\n            rank        = null\n            status_now  = 'missing'\n            # if sid > 1\n            #   R[ sid - 1 ]\n            # if status_prv\n          R.push { csid, rank, } # if rank?\n          status_prv = status_now\n        debug '^435345^', R\n        #.......................................................................................................\n        process.exit 111 if ++XXX_count > 90\n        return JSON.stringify R\n    #-------------------------------------------------------------------------------------------------------\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _procure_infrastructure: ->\n    ### TAINT skip if tables found ###\n    { prefix } = @cfg\n    @db.set_foreign_keys_state false\n    @db SQL\"\"\"\n      drop table    if exists #{prefix}_datasources;\n      drop table    if exists #{prefix}_posts;\n      drop table    if exists #{prefix}_sessions;\n      drop table    if exists #{prefix}_minmax_sids;\n      drop table    if exists #{prefix}_states;\n      drop table    if exists #{prefix}_tagged_posts;\n      drop table    if exists #{prefix}_tags;\n      drop table    if exists #{prefix}_trends_html;\n      drop trigger  if exists #{prefix}_on_insert_into_posts;\n      drop view     if exists #{prefix}_latest_trends;\n      drop view     if exists #{prefix}_latest_trends_html;\n      drop view     if exists #{prefix}_ordered_trends;\n      drop view     if exists #{prefix}_trends;\n      drop view     if exists _#{prefix}_trends;\"\"\"\n    @db.set_foreign_keys_state true\n    #-------------------------------------------------------------------------------------------------------\n    # TABLES\n    #.......................................................................................................\n    @db SQL\"\"\"\n      create table #{prefix}_datasources (\n          dsk     text not null,\n          url     text not null,\n        primary key ( dsk ) );\"\"\"\n    #.......................................................................................................\n    @db SQL\"\"\"\n      create table #{prefix}_sessions (\n          sid     integer not null,\n          dsk     text    not null,\n          ts      dt      not null,\n        primary key ( sid ),\n        foreign key ( dsk ) references #{prefix}_datasources );\"\"\"\n    #.......................................................................................................\n    @db SQL\"\"\"\n      create table #{prefix}_posts (\n          sid     integer not null,\n          pid     text    not null,\n          rank    integer not null,\n          details json    not null,\n        primary key ( sid, pid ),\n        foreign key ( sid ) references #{prefix}_sessions );\"\"\"\n    #.......................................................................................................\n    @db SQL\"\"\"\n      create table #{prefix}_states (\n          state   text    not null,\n        primary key ( state ) );\n      insert into #{prefix}_states ( state ) values\n        ( 'first' ), ( 'first cont' ), ( 'mid' ), ( 'last cont' ), ( 'last' );\"\"\"\n    #.......................................................................................................\n    @db SQL\"\"\"\n      create table #{prefix}_tags (\n          tag     text    not null,\n        primary key ( tag ) );\"\"\"\n    #.......................................................................................................\n    @db SQL\"\"\"\n      create table #{prefix}_tagged_posts (\n          pid     text    not null,\n          tag     text    not null,\n        primary key ( pid, tag ),\n        -- foreign key ( pid ) references #{prefix}_posts,\n        foreign key ( tag ) references #{prefix}_tags );\"\"\"\n    #.......................................................................................................\n    @db SQL\"\"\"\n      create view #{prefix}_minmax_sids as select\n          min( sid ) over w as sid_min,\n          max( sid ) over w as sid_max\n        from #{prefix}_posts\n        join #{prefix}_sessions using ( sid )\n        window w as ( partition by dsk );\"\"\"\n    #.......................................................................................................\n    @db SQL\"\"\"\n      create view _#{prefix}_trends as\n        select distinct\n          sid                                                     as sid,\n          pid                                                     as pid,\n          #{prefix}_sparkline_data_from_raw_trend(\n            json_group_array( json_array( sid, rank ) ) over w,\n            sid_min,\n            sid_max )  as trend\n        from #{prefix}_posts\n        join #{prefix}_minmax_sids using ( sid )\n        window w as (\n          partition by ( pid )\n          order by rank\n          range between unbounded preceding and current row );\"\"\"\n    # #.......................................................................................................\n    # @db SQL\"\"\"\n    #   drop view if exists _#{prefix}_trends_2;\n    #   create view _#{prefix}_trends_2 as select distinct\n    #       sid                                                     as sid,\n    #       pid                                                     as pid,\n    #       #{prefix}_sparkline_data_from_raw_trend(\n    #         json_group_array( json_array( sid, rank ) ) over w )  as trend\n    #     from #{prefix}_posts\n    #     window w as (\n    #       partition by ( pid )\n    #       order by rank\n    #       range between unbounded preceding and current row\n    #       );\"\"\"\n    #.......................................................................................................\n    @db SQL\"\"\"\n      create view #{prefix}_trends as select\n          sessions.dsk                                        as dsk,\n          sessions.sid                                        as sid,\n          sessions.ts                                         as ts,\n          posts.pid                                           as pid,\n          posts.rank                                          as rank,\n          trends.trend                                        as trend,\n          posts.details                                       as details\n        from #{prefix}_posts        as posts\n        join #{prefix}_sessions     as sessions     using ( sid )\n        join _#{prefix}_trends      as trends       using ( sid, pid )\n        order by\n          sid   desc,\n          rank  asc;\"\"\"\n    #.......................................................................................................\n    @db SQL\"\"\"\n      create table #{prefix}_trends_html (\n          nr        integer not null primary key,\n          sid       integer not null,\n          pid       integer not null,\n          html      text    not null,\n        foreign key ( sid ) references #{prefix}_sessions );\"\"\"\n    #.......................................................................................................\n    @db SQL\"\"\"\n      create view #{prefix}_ordered_trends as select\n          row_number() over w as rnr, -- 'reverse number' b/c most recent appearances get to be number one\n          *\n        from #{prefix}_trends\n        window w as ( partition by pid order by sid desc )\n        order by\n          sid   desc,\n          rank  asc,\n          rnr   asc;\"\"\"\n    #.......................................................................................................\n    @db SQL\"\"\"\n      create view #{prefix}_latest_trends as select\n          *\n        from #{prefix}_ordered_trends\n        where rnr = 1\n        order by\n          sid   desc,\n          rank  asc,\n          rnr   asc;\"\"\"\n    #.......................................................................................................\n    @db SQL\"\"\"\n      create view #{prefix}_latest_trends_html as select\n          *\n        from #{prefix}_trends_html as trends_html\n        join #{prefix}_latest_trends using ( sid, pid )\n        order by\n          sid   desc,\n          rank  asc,\n          nr    asc;\"\"\"\n    #.......................................................................................................\n    @db SQL\"\"\"\n      create trigger #{prefix}_on_insert_into_posts after insert on #{prefix}_posts\n        for each row begin\n          insert into #{prefix}_trends_html ( sid, pid, html )\n            select\n                sid,\n                pid,\n                #{prefix}_get_html_from_purpose( 'details', dsk, json_object(\n                  'dsk',      dsk,\n                  'sid',      sid,\n                  'ts',       ts,\n                  'pid',      pid,\n                  'rank',     rank,\n                  'trend',    trend,\n                  'details',  new.details ) )\n              from #{prefix}_trends as trends\n              where ( trends.sid = new.sid ) and ( trends.pid = new.pid );\n          end;\"\"\"\n    #.......................................................................................................\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _compile_sql: ->\n    { prefix } = @cfg\n    #.......................................................................................................\n    GUY.props.hide @, 'queries',\n      # #.....................................................................................................\n      # get_db_object_count: @db.prepare SQL\"\"\"\n      #   select count(*) as count from sqlite_schema where starts_with( $name, $prefix || '_' );\"\"\"\n      #.....................................................................................................\n      insert_datasource:  @db.prepare_insert { into: \"#{prefix}_datasources\", }\n      #.....................................................................................................\n      insert_session:       @db.prepare SQL\"\"\"\n        with next_free as ( select\n            coalesce( max( sid ), 0 ) + 1 as sid\n          from #{prefix}_sessions )\n        insert into #{prefix}_sessions ( sid, dsk, ts )\n          select sid, $dsk, std_dt_now() from next_free\n          returning *;\"\"\"\n      #.....................................................................................................\n      insert_post:        @db.prepare SQL\"\"\"\n        with next_free as ( select\n            coalesce( max( rank ), 0 ) + 1 as rank\n          from #{prefix}_posts\n          where true\n            and ( sid = $sid ) )\n        insert into #{prefix}_posts ( sid, pid, rank, details )\n          select $sid, $pid, next_free.rank, $details from next_free\n          returning *;\"\"\"\n    #.......................................................................................................\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  new_session:  ( dsk     ) -> @db.first_row @queries.insert_session, { dsk, }\n  new_post:     ( fields  ) -> @db.first_row @queries.insert_post, fields\n\n  #---------------------------------------------------------------------------------------------------------\n  get_latest_trends: ->\n    ### TAINT not strictly needed to parse, then serialize again ###\n    { prefix } = @cfg\n    R = []\n    for row from @db SQL\"\"\"select trend from #{prefix}_latest_trends;\"\"\"\n      R.push JSON.parse row.trend\n    return R\n\n\n\n\n"
  ]
}