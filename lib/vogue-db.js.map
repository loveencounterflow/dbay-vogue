{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/vogue-db.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DBAY-VOGUE/DB'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPATH                      = require 'path'\nGUY                       = require 'guy'\n# { HTMLISH: ITXH }         = require 'intertext'\n# URL                       = require 'url'\n# { Html }                  = require './html'\n{ DBay }                  = require 'dbay'\n{ SQL }                   = DBay\n{ Vogue_common_mixin }    = require './vogue-common-mixin'\nH                         = require './helpers'\nXXX_cfg_replacement =\n  chart_history_length: 20\n\n\n#===========================================================================================================\nclass @Vogue_db extends Vogue_common_mixin()\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( cfg ) ->\n    super()\n    @cfg        = { @defaults.vogue_db_constructor_cfg..., cfg..., }\n    @cfg.db    ?= new DBay()\n    @types.validate.vogue_db_constructor_cfg @cfg\n    { db,     } = GUY.obj.pluck_with_fallback @cfg, null, 'db';     GUY.props.hide @, 'db',     db\n    @cfg        = GUY.lft.freeze @cfg\n    debug '^5343^', @cfg\n    debug '^5343^', @db.cfg\n    #.......................................................................................................\n    @db.create_stdlib()\n    @_set_variables?()\n    @_create_sql_functions?()\n    @_procure_infrastructure?()\n    @_compile_sql?()\n    GUY.props.hide @, 'cache', { get_html_for: {}, }\n    @hub = H.property_pending\n    #.......................................................................................................\n    return undefined\n\n\n  #=========================================================================================================\n  #\n  #---------------------------------------------------------------------------------------------------------\n  # _set_variables: ->\n  #   @db.setv 'allow_change_on_mirror', 0\n\n  #---------------------------------------------------------------------------------------------------------\n  _procure_infrastructure: ->\n    ### TAINT skip if tables found ###\n    { prefix } = @cfg\n    @db.set_foreign_keys_state false\n    @db SQL\"\"\"\n      drop table    if exists #{prefix}_datasources;\n      drop table    if exists #{prefix}_posts;\n      drop table    if exists #{prefix}_sessions;\n      drop view     if exists #{prefix}_minmax_sids;\n      drop table    if exists #{prefix}_states;\n      drop table    if exists #{prefix}_tagged_posts;\n      drop table    if exists #{prefix}_tags;\n      drop table    if exists #{prefix}_trends_html;\n      drop trigger  if exists #{prefix}_on_insert_into_posts;\n      drop view     if exists #{prefix}_latest_trends;\n      drop view     if exists #{prefix}_latest_trends_html;\n      drop view     if exists #{prefix}_ordered_trends;\n      drop view     if exists #{prefix}_trends;\n      drop view     if exists _#{prefix}_trends_01;\n      drop view     if exists #{prefix}_XXX_ranks;\n      drop view     if exists #{prefix}_XXX_grouped_ranks;\"\"\"\n    @db.set_foreign_keys_state true\n    #-------------------------------------------------------------------------------------------------------\n    # TABLES\n    #.......................................................................................................\n    @db SQL\"\"\"\n      create table #{prefix}_datasources (\n          dsk     text not null,\n          url     text not null,\n        primary key ( dsk ) );\"\"\"\n    #.......................................................................................................\n    @db SQL\"\"\"\n      create table #{prefix}_sessions (\n          sid     integer not null,\n          dsk     text    not null,\n          ts      dt      not null,\n        primary key ( sid ),\n        foreign key ( dsk ) references #{prefix}_datasources );\"\"\"\n    #.......................................................................................................\n    @db SQL\"\"\"\n      create table #{prefix}_posts (\n          sid     integer not null,\n          pid     text    not null,\n          rank    integer not null,\n          details json    not null,\n        primary key ( sid, pid ),\n        foreign key ( sid ) references #{prefix}_sessions );\"\"\"\n    #.......................................................................................................\n    @db SQL\"\"\"\n      create view #{prefix}_XXX_ranks as select\n          sid                                         as sid,\n          pid                                         as pid,\n          rank                                        as rank,\n          coalesce( pid != lag(  pid ) over w, true ) as first,\n          coalesce( pid != lead( pid ) over w, true ) as last\n        from #{prefix}_posts\n        window w as (\n          partition by pid\n          order by sid )\n        order by sid, pid;\"\"\"\n    #.......................................................................................................\n    @db SQL\"\"\"\n      create view #{prefix}_XXX_grouped_ranks as select distinct\n          pid                                     as pid,\n          json_group_array( json_object(\n            'sid',    sid,\n            'rank',   rank,\n            'first',  first,\n            'last',   last ) ) over w               as xxx_trend\n        from #{prefix}_XXX_ranks\n        window w as (\n          partition by pid\n          order by sid\n          range between unbounded preceding and unbounded following )\n        order by pid;\"\"\"\n    # #.......................................................................................................\n    # @db SQL\"\"\"\n    #   create table #{prefix}_states (\n    #       state   text    not null,\n    #     primary key ( state ) );\n    #   insert into #{prefix}_states ( state ) values\n    #     ( 'first' ), ( 'first cont' ), ( 'mid' ), ( 'last cont' ), ( 'last' );\"\"\"\n    #.......................................................................................................\n    @db SQL\"\"\"\n      create table #{prefix}_tags (\n          tag     text    not null,\n        primary key ( tag ) );\"\"\"\n    #.......................................................................................................\n    @db SQL\"\"\"\n      create table #{prefix}_tagged_posts (\n          pid     text    not null,\n          tag     text    not null,\n        primary key ( pid, tag ),\n        -- foreign key ( pid ) references #{prefix}_posts,\n        foreign key ( tag ) references #{prefix}_tags );\"\"\"\n    #.......................................................................................................\n    @db SQL\"\"\"\n      create view #{prefix}_minmax_sids as select\n          sessions.dsk      as dsk,\n          min( sid ) over w as sid_min,\n          max( sid ) over w as sid_max\n        from #{prefix}_posts    as posts\n        join #{prefix}_sessions as sessions using ( sid )\n        window w as ( partition by dsk );\"\"\"\n    #.......................................................................................................\n    @db SQL\"\"\"\n      create view _#{prefix}_trends_01 as\n        select distinct\n          sid                                                     as sid,\n          pid                                                     as pid,\n          json_group_array( json_array( sid, rank ) ) over w      as raw_trend\n        from #{prefix}_posts\n        -- join #{prefix}_minmax_sids using ( sid )\n        window w as (\n          partition by ( pid )\n          order by rank\n          range between unbounded preceding and current row );\"\"\"\n    #.......................................................................................................\n    @db SQL\"\"\"\n      create view #{prefix}_trends as select\n          sessions.dsk                                        as dsk,\n          sessions.sid                                        as sid,\n          sessions.ts                                         as ts,\n          posts.pid                                           as pid,\n          posts.rank                                          as rank,\n          trends.raw_trend                                    as raw_trend,\n          posts.details                                       as details\n        from #{prefix}_posts        as posts\n        join #{prefix}_sessions     as sessions     using ( sid )\n        join _#{prefix}_trends_01   as trends       using ( sid, pid )\n        order by\n          sid   desc,\n          rank  asc;\"\"\"\n    #.......................................................................................................\n    @db SQL\"\"\"\n      create table #{prefix}_trends_html (\n          sid             integer not null,\n          pid             integer not null,\n          sparkline_data  text    not null,\n          html            text    not null,\n        primary key ( sid, pid ),\n        foreign key ( sid, pid ) references #{prefix}_posts );\"\"\"\n    #.......................................................................................................\n    @db SQL\"\"\"\n      create view #{prefix}_ordered_trends as select\n          row_number() over w as rnr, -- 'reverse number' b/c most recent appearances get to be number one\n          dsk                 as dsk,\n          sid                 as sid,\n          ts                  as ts,\n          pid                 as pid,\n          rank                as rank,\n          raw_trend           as raw_trend,\n          details             as details\n        from #{prefix}_trends\n        window w as ( partition by pid order by sid desc )\n        order by\n          sid   desc,\n          rank  asc,\n          rnr   asc;\"\"\"\n    #.......................................................................................................\n    @db SQL\"\"\"\n      create view #{prefix}_latest_trends as select\n          rnr,\n          dsk,\n          sid,\n          ts,\n          pid,\n          rank,\n          raw_trend,\n          details\n        from #{prefix}_ordered_trends\n        where rnr = 1\n        order by\n          sid   desc,\n          rank  asc,\n          rnr   asc;\"\"\"\n    #.......................................................................................................\n    @db SQL\"\"\"\n      create view #{prefix}_latest_trends_html as select\n          *\n        from #{prefix}_trends_html as trends_html\n        join #{prefix}_latest_trends using ( sid, pid )\n        order by\n          sid   desc,\n          rank  asc;\"\"\"\n    #.......................................................................................................\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _compile_sql: ->\n    { prefix } = @cfg\n    #.......................................................................................................\n    GUY.props.hide @, 'queries',\n      # #.....................................................................................................\n      # get_db_object_count: @db.prepare SQL\"\"\"\n      #   select count(*) as count from sqlite_schema where starts_with( $name, $prefix || '_' );\"\"\"\n      #.....................................................................................................\n      insert_datasource:  @db.prepare_insert { into: \"#{prefix}_datasources\", }\n      #.....................................................................................................\n      insert_session:       @db.prepare SQL\"\"\"\n        with next_free as ( select\n            coalesce( max( sid ), 0 ) + 1 as sid\n          from #{prefix}_sessions )\n        insert into #{prefix}_sessions ( sid, dsk, ts )\n          select sid, $dsk, std_dt_now() from next_free\n          returning *;\"\"\"\n      #.....................................................................................................\n      insert_post:        @db.prepare SQL\"\"\"\n        with next_free as ( select\n            coalesce( max( rank ), 0 ) + 1 as rank\n          from #{prefix}_posts\n          where true\n            and ( sid = $sid ) )\n        insert into #{prefix}_posts ( sid, pid, rank, details )\n          select $sid, $pid, next_free.rank, $details from next_free\n          returning *;\"\"\"\n      #.......................................................................................................\n      insert_trends_html: @db.prepare_insert { into: \"#{prefix}_trends_html\", returning: '*', }\n      trend_from_sid_pid: @db.prepare SQL\"\"\"\n        select\n            raw_trend\n          from #{prefix}_trends\n          where true\n            and ( sid = $sid )\n            and ( pid = $pid );\"\"\"\n      #.......................................................................................................\n      get_minmax_sids: @db.prepare SQL\"\"\"\n        select\n            sid_min,\n            sid_max\n          from #{prefix}_minmax_sids\n          where ( dsk = $dsk );\"\"\"\n    #.......................................................................................................\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  new_session:  ( dsk     ) -> @db.first_row @queries.insert_session, { dsk, }\n\n  #---------------------------------------------------------------------------------------------------------\n  _sparkline_data_from_raw_trend: ( raw_trend ) ->\n          # #{prefix}_sparkline_data_from_raw_trend(\n          #   ,\n          #   0, /* sid_min, */\n          #   20 /* sid_max  */ )                                             as trend\n    dense_trend         = []\n    dense_trend[ sid ]  = rank for [ sid, rank, ] in raw_trend\n    #.......................................................................................................\n    return JSON.stringify ( { sid, rank, } for rank, sid in dense_trend )\n    # #-------------------------------------------------------------------------------------------------------\n    # XXX_count = 0\n    # @db.create_function\n    #   name:           prefix + '_sparkline_data_from_raw_trend'\n    #   deterministic:  true\n    #   varargs:        false\n    #   call:           ( trend_json, sid_min, sid_max ) =>\n    #     ###\n    #     `sid`: Session ID\n    #     `sid_min`: earliest session ID in DB for the current datasource\n\n    #     ###\n    #     trend               = JSON.parse trend_json\n    #     R                   = []\n    #     dense_trend         = []\n    #     csid_min            = Math.max 0, ( sid_min - sid_max ) + XXX_cfg_replacement.chart_history_length\n    #     csid_max            = XXX_cfg_replacement.chart_history_length\n    #     first_csid          = null\n    #     last_csid           = null\n    #     for [ sid, rank, ] in trend\n    #       csid = ( sid - sid_max ) + csid_max\n    #       continue if csid < 0\n    #       dense_trend[ csid ]  = rank\n    #     last_sid            = sid\n    #     status_prv          = 'missing'\n    #     status_now          = 'first'\n    #     for rank, csid in dense_trend\n    #       unless rank?\n    #         rank        = null\n    #         status_now  = 'missing'\n    #         # if sid > 1\n    #         #   R[ sid - 1 ]\n    #         # if status_prv\n    #       R.push { csid, rank, } # if rank?\n    #       status_prv = status_now\n    #     # debug '^435345^', R\n    #     #.......................................................................................................\n    #     # process.exit 111 if ++XXX_count > 90\n    #     return JSON.stringify R\n    #-------------------------------------------------------------------------------------------------------\n\n  #---------------------------------------------------------------------------------------------------------\n  new_post: ( fields ) ->\n    ### TAINT validate fields is { dsk, sid, pid, details, } ###\n    { dsk\n      sid\n      pid\n      session\n      details }     = fields\n    { ts }          = session\n    post            = @db.first_row @queries.insert_post, { sid, pid, details: ( JSON.stringify details ), }\n    # debug '^1423^', @db.first_row @queries.get_minmax_sids, { dsk, }\n    { rank }        = post\n    raw_trend       = JSON.parse @db.single_value @queries.trend_from_sid_pid, { sid, pid, }\n    sparkline_data  = @_sparkline_data_from_raw_trend raw_trend\n    # debug '^345345^', { sparkline_data, }\n    ### TAINT rename trend -> sparkline_data ###\n    html            = @_html_from_purpose 'details', { dsk, sid, pid, ts, rank, sparkline_data, details, }\n    ignore          = @db.single_row @queries.insert_trends_html, { post..., sparkline_data, html, }\n    return post\n\n  #---------------------------------------------------------------------------------------------------------\n  _html_from_purpose: ( purpose, row ) =>\n    @types.validate.nonempty_text purpose\n    @types.validate.object row\n    #...................................................................................................\n    ### TAINT use caching method, hide implementation details ###\n    unless ( method = @cache.get_html_for[ purpose ] )?\n      scraper     = @hub.scrapers._scraper_from_dsk row.dsk\n      method_name = \"html_from_#{purpose}\"\n      unless ( method = scraper[ method_name ] )?\n        throw new Error \"^dbay-scraper@1^ scraper has no method #{rpr method_name}\"\n      @cache.get_html_for[ method_name ] = method\n    #...................................................................................................\n    return method.call scraper, row\n\n  #---------------------------------------------------------------------------------------------------------\n  get_latest_sparkline_data_json: ->\n    { prefix }  = @cfg\n    R           = []\n    # for row from @db SQL\"\"\"select sparkline_data from #{prefix}_trends_html;\"\"\"\n    for row from @db SQL\"\"\"select sparkline_data from #{prefix}_latest_trends_html;\"\"\"\n      R.push JSON.parse row.sparkline_data\n    return JSON.stringify R\n\n\n\n\n"
  ]
}