{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/vogue-db.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DBAY-VOGUE/DB'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPATH                      = require 'path'\nGUY                       = require 'guy'\n# { HTMLISH: ITXH }         = require 'intertext'\n# URL                       = require 'url'\n# { Html }                  = require './html'\n{ DBay }                  = require 'dbay'\n{ SQL }                   = DBay\n_types                    = require './types'\n{ Vogue_common_mixin }    = require './vogue-common-mixin'\nH                         = require './helpers'\n\n\n#===========================================================================================================\nclass @Vogue_db extends Vogue_common_mixin()\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( cfg ) ->\n    super()\n    #.......................................................................................................\n    @cfg        = { @defaults.vogue_db_constructor_cfg..., cfg..., }\n    @cfg.db    ?= new DBay()\n    @types.validate.vogue_db_constructor_cfg @cfg\n    { db,     } = GUY.obj.pluck_with_fallback @cfg, null, 'db';     GUY.props.hide @, 'db',     db\n    { client, } = GUY.obj.pluck_with_fallback @cfg, null, 'client'; GUY.props.hide @, 'client', client\n    @cfg        = GUY.lft.freeze @cfg\n    #.......................................................................................................\n    @db.create_stdlib()\n    @_set_variables?()\n    @_create_sql_functions?()\n    @_procure_infrastructure?()\n    @_compile_sql?()\n    GUY.props.hide @, 'cache', { get_html_for: {}, }\n    @hub = H.property_pending\n    #.......................................................................................................\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  ### TAINT API subject to change ###\n  XXX_add_scraper: ( scraper ) ->\n    @scrapers.push scraper\n    return null\n\n  #=========================================================================================================\n  #\n  #---------------------------------------------------------------------------------------------------------\n  # _set_variables: ->\n  #   @db.setv 'allow_change_on_mirror', 0\n\n  #---------------------------------------------------------------------------------------------------------\n  _create_sql_functions: ->\n    { prefix } = @cfg\n    #-------------------------------------------------------------------------------------------------------\n    @db.create_function\n      name:           prefix + '_get_html_for'\n      deterministic:  true\n      varargs:        false\n      call:           ( table_name, fields ) =>\n        @types.validate.nonempty_text table_name\n        @types.validate_optional.text fields\n        #...................................................................................................\n        ### TAINT use caching method, hide implementation details ###\n        unless ( method = @cache.get_html_for[ table_name ] )?\n          method_name = \"get_html_for_#{table_name}\"\n          unless ( method = @client[ method_name ] )?\n            throw new Error \"^dbay-scraper@1^ client has no method #{rpr method_name}\"\n          @cache.get_html_for[ method_name ] = method\n        #...................................................................................................\n        fields = JSON.parse fields if fields?\n        return method.call @client, fields\n    #-------------------------------------------------------------------------------------------------------\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _procure_infrastructure: ->\n    ### TAINT skip if tables found ###\n    { prefix } = @cfg\n    @db.set_foreign_keys_state false\n    @db SQL\"\"\"\n      drop table    if exists #{prefix}_datasources;\n      drop table    if exists #{prefix}_sessions;\n      drop table    if exists #{prefix}_posts;\n      drop view     if exists _#{prefix}_trends;\n      drop view     if exists #{prefix}_trends;\n      drop table    if exists #{prefix}_trends_html;\n      drop trigger  if exists #{prefix}_on_insert_into_posts;\"\"\"\n    @db.set_foreign_keys_state true\n    #-------------------------------------------------------------------------------------------------------\n    # TABLES\n    #.......................................................................................................\n    @db SQL\"\"\"\n      create table #{prefix}_datasources (\n          dsk     text not null,\n          url     text not null,\n        primary key ( dsk ) );\"\"\"\n    #.......................................................................................................\n    @db SQL\"\"\"\n      create table #{prefix}_sessions (\n          sid     integer not null,\n          dsk     text    not null,\n          ts      dt      not null,\n        primary key ( sid ),\n        foreign key ( dsk ) references #{prefix}_datasources );\"\"\"\n    #.......................................................................................................\n    @db SQL\"\"\"\n      create table #{prefix}_posts (\n          sid     integer not null,\n          pid     text    not null,\n          rank    integer not null,\n          details json    not null,\n        primary key ( sid, pid ),\n        foreign key ( sid ) references #{prefix}_sessions );\"\"\"\n    #.......................................................................................................\n    @db SQL\"\"\"\n      create table #{prefix}_tags (\n          tag     text    not null,\n        primary key ( tag ) );\"\"\"\n    #.......................................................................................................\n    @db SQL\"\"\"\n      create table #{prefix}_tagged_posts (\n          pid     text    not null,\n          tag     text    not null,\n        primary key ( pid, tag ),\n        -- foreign key ( pid ) references #{prefix}_posts ),\n        foreign key ( tag ) references #{prefix}_tags );\"\"\"\n    #.......................................................................................................\n    @db SQL\"\"\"\n      create view _#{prefix}_trends as select distinct\n          sid                                                 as sid,\n          pid                                                 as pid,\n          json_group_array( json_array( sid, rank ) ) over w  as trend\n        from #{prefix}_posts\n        window w as (\n          partition by ( pid )\n          order by rank\n          range between unbounded preceding and current row\n          );\"\"\"\n    #.......................................................................................................\n    @db SQL\"\"\"\n      create view #{prefix}_trends as select\n          sessions.dsk                                        as dsk,\n          sessions.sid                                        as sid,\n          sessions.ts                                         as ts,\n          posts.pid                                           as pid,\n          posts.rank                                          as rank,\n          trends.trend                                        as trend,\n          posts.details                                       as details\n        from #{prefix}_posts        as posts\n        join #{prefix}_sessions     as sessions     using ( sid )\n        join _#{prefix}_trends      as trends       using ( sid, pid )\n        order by\n          sid   desc,\n          rank  asc;\"\"\"\n    #.......................................................................................................\n    @db SQL\"\"\"\n      create table #{prefix}_trends_html (\n          nr        integer not null primary key,\n          sid       integer not null,\n          html      text    not null,\n        foreign key ( sid ) references #{prefix}_sessions );\"\"\"\n    #.......................................................................................................\n    @db SQL\"\"\"\n      create trigger #{prefix}_on_insert_into_posts after insert on #{prefix}_posts\n        for each row begin\n          insert into #{prefix}_trends_html ( sid, html )\n            select\n                sid,\n                #{prefix}_get_html_for( 'trends', json_object(\n                  'dsk',      dsk,\n                  'sid',      sid,\n                  'ts',       ts,\n                  'pid',      pid,\n                  'rank',     rank,\n                  'trend',    trend,\n                  'details',  new.details ) )\n              from #{prefix}_trends as trends\n              where ( trends.sid = new.sid ) and ( trends.pid = new.pid );\n          end;\"\"\"\n    #.......................................................................................................\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _compile_sql: ->\n    { prefix } = @cfg\n    #.......................................................................................................\n    GUY.props.hide @, 'queries',\n      # #.....................................................................................................\n      # get_db_object_count: @db.prepare SQL\"\"\"\n      #   select count(*) as count from sqlite_schema where starts_with( $name, $prefix || '_' );\"\"\"\n      #.....................................................................................................\n      insert_datasource:  @db.prepare_insert { into: \"#{prefix}_datasources\", }\n      #.....................................................................................................\n      insert_session:       @db.prepare SQL\"\"\"\n        with next_free as ( select\n            coalesce( max( sid ), 0 ) + 1 as sid\n          from #{prefix}_sessions )\n        insert into #{prefix}_sessions ( sid, dsk, ts )\n          select sid, $dsk, std_dt_now() from next_free\n          returning *;\"\"\"\n      #.....................................................................................................\n      insert_post:        @db.prepare SQL\"\"\"\n        with next_free as ( select\n            coalesce( max( rank ), 0 ) + 1 as rank\n          from #{prefix}_posts\n          where true\n            and ( sid = $sid ) )\n        insert into #{prefix}_posts ( sid, pid, rank, details )\n          select $sid, $pid, next_free.rank, $details from next_free\n          returning *;\"\"\"\n    #.......................................................................................................\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  new_session:  ( dsk     ) -> @db.first_row @queries.insert_session, { dsk, }\n  new_post:     ( fields  ) -> @db.first_row @queries.insert_post, fields\n"
  ]
}