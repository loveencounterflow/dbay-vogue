{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/vogue-db.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DBAY-VOGUE/DB'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPATH                      = require 'path'\nGUY                       = require 'guy'\n# { HTMLISH: ITXH }         = require 'intertext'\n# URL                       = require 'url'\n# { Html }                  = require './html'\n{ DBay }                  = require 'dbay'\n{ SQL }                   = DBay\n{ Vogue_common_mixin }    = require './vogue-common-mixin'\nH                         = require './helpers'\n{ HDML, }                 = require 'hdml'\nXXX_cfg_replacement =\n  chart_history_length: 20\n\n\n#===========================================================================================================\nclass @Vogue_db extends Vogue_common_mixin()\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( cfg ) ->\n    super()\n    @cfg        = { @defaults.vogue_db_constructor_cfg..., cfg..., }\n    @cfg.db    ?= new DBay()\n    @types.validate.vogue_db_constructor_cfg @cfg\n    { db,     } = GUY.obj.pluck_with_fallback @cfg, null, 'db';     GUY.props.hide @, 'db',     db\n    @cfg        = GUY.lft.freeze @cfg\n    #.......................................................................................................\n    @db.create_stdlib()\n    @_set_variables?()\n    @_create_sql_functions?()\n    @_procure_infrastructure?()\n    @_compile_sql?()\n    GUY.props.hide @, 'cache', { get_html_for: {}, }\n    @hub = H.property_pending\n    #.......................................................................................................\n    return undefined\n\n\n  #=========================================================================================================\n  #\n  #---------------------------------------------------------------------------------------------------------\n  # _set_variables: ->\n  #   @db.setv 'allow_change_on_mirror', 0\n\n  #---------------------------------------------------------------------------------------------------------\n  _procure_infrastructure: ->\n    ### TAINT skip if tables found ###\n    { prefix } = @cfg\n    @db.set_foreign_keys_state false\n    @db SQL\"\"\"\n      drop table  if exists #{prefix}_datasources;\n      drop table  if exists #{prefix}_sessions;\n      drop table  if exists #{prefix}_posts;\n      drop view   if exists #{prefix}_XXX_ranks;\n      drop view   if exists #{prefix}_XXX_grouped_ranks;\n      drop view   if exists #{prefix}_trends;\"\"\"\n    @db.set_foreign_keys_state true\n    #-------------------------------------------------------------------------------------------------------\n    # TABLES\n    #.......................................................................................................\n    @db SQL\"\"\"\n      create table #{prefix}_datasources (\n          dsk     text not null,\n          url     text not null,\n        primary key ( dsk ) );\"\"\"\n    #.......................................................................................................\n    @db SQL\"\"\"\n      create table #{prefix}_sessions (\n          sid     integer not null,\n          dsk     text    not null,\n          ts      dt      not null,\n        primary key ( sid ),\n        foreign key ( dsk ) references #{prefix}_datasources );\"\"\"\n    #.......................................................................................................\n    @db SQL\"\"\"\n      create table #{prefix}_posts (\n          sid     integer not null,\n          pid     text    not null,\n          rank    integer not null,\n          details json    not null,\n        primary key ( sid, pid ),\n        foreign key ( sid ) references #{prefix}_sessions );\"\"\"\n    #.......................................................................................................\n    @db SQL\"\"\"\n      create view #{prefix}_XXX_ranks as select\n          session.dsk                                           as dsk,\n          post.sid                                              as sid,\n          post.pid                                              as pid,\n          post.rank                                             as rank,\n          coalesce( post.pid != lag(  post.pid ) over w, true ) as first,\n          coalesce( post.pid != lead( post.pid ) over w, true ) as last\n        from #{prefix}_posts    as post\n        join #{prefix}_sessions as session using ( sid )\n        window w as (\n          partition by pid\n          order by sid )\n        order by sid, pid;\"\"\"\n    #.......................................................................................................\n    @db SQL\"\"\"\n      create view #{prefix}_XXX_grouped_ranks as select distinct\n          pid                                       as pid,\n          min( sid ) over w                         as sid_min,\n          max( sid ) over w                         as sid_max,\n          json_group_array( json_object(\n            'dsk',    dsk,\n            'pid',    pid,\n            'sid',    sid,\n            'rank',   rank,\n            'first',  first,\n            'last',   last ) ) over w               as xxx_trend\n        from #{prefix}_XXX_ranks\n        window w as (\n          partition by pid\n          order by sid\n          range between unbounded preceding and unbounded following )\n        order by pid;\"\"\"\n    #.......................................................................................................\n    @db SQL\"\"\"\n      create view #{prefix}_trends as select\n          sessions.dsk                                        as dsk,\n          trends.sid_min                                      as sid_min, -- 'first seen' in session SID_*min*\n          trends.sid_max                                      as sid_max, -- 'last  seen' in session SID_*max*\n          sessions.ts                                         as ts,\n          posts.pid                                           as pid,\n          posts.rank                                          as rank,\n          trends.xxx_trend                                    as raw_trend,\n          posts.details                                       as details\n        from #{prefix}_posts              as posts\n        join #{prefix}_sessions           as sessions     using ( sid )\n        join #{prefix}_XXX_grouped_ranks  as trends       using ( pid )\n        where true\n          and ( sessions.sid = trends.sid_max )\n        order by\n          sid   desc,\n          rank  asc;\"\"\"\n    #.......................................................................................................\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _compile_sql: ->\n    { prefix } = @cfg\n    #.......................................................................................................\n    GUY.props.hide @, 'queries',\n      # #.....................................................................................................\n      # get_db_object_count: @db.prepare SQL\"\"\"\n      #   select count(*) as count from sqlite_schema where starts_with( $name, $prefix || '_' );\"\"\"\n      #.....................................................................................................\n      insert_datasource:  @db.prepare_insert { into: \"#{prefix}_datasources\", }\n      #.....................................................................................................\n      insert_session:       @db.prepare SQL\"\"\"\n        with next_free as ( select\n            coalesce( max( sid ), 0 ) + 1 as sid\n          from #{prefix}_sessions )\n        insert into #{prefix}_sessions ( sid, dsk, ts )\n          select sid, $dsk, std_dt_now() from next_free\n          returning *;\"\"\"\n      #.....................................................................................................\n      insert_post:        @db.prepare SQL\"\"\"\n        with next_free as ( select\n            coalesce( max( rank ), 0 ) + 1 as rank\n          from #{prefix}_posts\n          where true\n            and ( sid = $sid ) )\n        insert into #{prefix}_posts ( sid, pid, rank, details )\n          select $sid, $pid, next_free.rank, $details from next_free\n          returning *;\"\"\"\n      #.......................................................................................................\n      trend_from_sid_pid: @db.prepare SQL\"\"\"\n        select\n            raw_trend\n          from #{prefix}_trends\n          where true\n            and ( $sid between sid_min and sid_max )\n            and ( pid = $pid );\"\"\"\n      #.......................................................................................................\n      trends_from_dsk_sid: @db.prepare SQL\"\"\"\n        select\n            raw_trend\n          from #{prefix}_trends where true\n            and ( dsk = $dsk )\n            -- and ( sid = $sid );\n            \"\"\"\n      #.......................................................................................................\n      ### Given a datasource (identified as DSK), return the last session (identified as SID) for that\n      datasource ###\n      sid_max_from_dsk: @db.prepare SQL\"\"\"\n        select\n            max( sid_max ) as sid_max\n          from #{prefix}_trends where true\n            and ( dsk = $dsk );\"\"\"\n    #.......................................................................................................\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  new_session:  ( dsk     ) -> @db.first_row @queries.insert_session, { dsk, }\n\n  #---------------------------------------------------------------------------------------------------------\n  new_post: ( fields ) ->\n    ### TAINT validate fields is { dsk, sid, pid, details, } ###\n    { dsk\n      sid\n      pid\n      session\n      details }     = fields\n    { ts }          = session\n    post            = @db.first_row @queries.insert_post, { sid, pid, details: ( JSON.stringify details ), }\n    { rank }        = post\n    trend           = @db.single_value @queries.trend_from_sid_pid, { sid, pid, }\n    # html            = @_html_from_purpose 'details', { dsk, sid, pid, ts, rank, trend, details, }\n    # ignore          = @db.single_row @queries.insert_trends_html, { post..., trend, html, }\n    return post\n\n  #---------------------------------------------------------------------------------------------------------\n  _html_from_purpose: ( purpose, row ) =>\n    @types.validate.nonempty_text purpose\n    @types.validate.object row\n    #...................................................................................................\n    ### TAINT use caching method, hide implementation details ###\n    unless ( method = @cache.get_html_for[ purpose ] )?\n      scraper     = @hub.scrapers._scraper_from_dsk row.dsk\n      method_name = \"html_from_#{purpose}\"\n      unless ( method = scraper[ method_name ] )?\n        throw new Error \"^dbay-scraper@1^ scraper has no method #{rpr method_name}\"\n      @cache.get_html_for[ method_name ] = method\n    #...................................................................................................\n    return method.call scraper, row\n\n  #---------------------------------------------------------------------------------------------------------\n  trends_data_json_from_dsk_sid: ( cfg ) ->\n    cfg         = { @defaults.vogue_db_trends_data_json_from_dsk_sid_cfg..., cfg..., }\n    @types.validate.vogue_db_trends_data_json_from_dsk_sid_cfg cfg\n    { dsk\n      sid     } = cfg\n    R           = []\n    { prefix  } = @cfg\n    sid        ?= @db.single_value @queries.sid_max_from_dsk, { dsk, }\n    for row from @db @queries.trends_from_dsk_sid, { dsk, sid, }\n      R.push JSON.parse row.raw_trend\n    return JSON.stringify R\n\n  #---------------------------------------------------------------------------------------------------------\n  as_html: ( cfg ) ->\n    ### TAINT iterate or use stream ###\n    cfg         = { @defaults.vogue_db_as_html_cfg..., cfg..., }\n    @types.validate.vogue_db_as_html_cfg cfg\n    if cfg.table?\n      table_i   = @db.sql.I cfg.table\n      cfg.rows  = @db SQL\"\"\"select * from #{table_i};\"\"\"\n    else if cfg.query?\n      cfg.rows  = @db cfg.query, cfg.parameters ? {}\n    else if cfg.rows?\n      null\n    return @_table_as_html cfg\n    # try return @_table_as_html cfg catch error then null\n    # return error.message\n\n  #---------------------------------------------------------------------------------------------------------\n  _table_as_html: ( cfg ) ->\n    ### TAINT move this to DBay ###\n    ### TAINT use SQL generation facility from DBay (TBW) ###\n    { rows\n      fields  }   = cfg\n    fields        = { fields..., }\n    # for key, value of fields\n    #   if value is true then fields[ key ] = {}\n    for key, value of fields\n      value         = {} if value is true\n      fields[ key ] = { @defaults.vogue_db_field_description_object..., value..., }\n    debug '^354^', { fields, }\n    keys          = null\n    R             = []\n    row_nr        = 0\n    has_ths       = false\n    #.......................................................................................................\n    push_table_headers = ( row = null ) =>\n      has_ths = true\n      keys = Object.keys switch cfg.keys\n        when 'row,cfg'  then { row..., fields..., }\n        when 'cfg,row'  then { fields..., row..., }\n        when 'row'      then row\n        when 'cfg'      then fields\n      return if keys.length is 0\n      R.push HDML.open 'tr'\n      for key in keys\n        if ( field = fields[ key ] )?\n          continue if field.display is false\n          title = field.title ? key\n        else\n          title = key\n        R.push HDML.pair 'th', { class: key, }, HDML.text title\n      R.push HDML.close 'tr'\n      return null\n    #.......................................................................................................\n    R.push HDML.open 'table', { class: cfg.class, }\n    #.......................................................................................................\n    for row from rows\n      row_nr++\n      push_table_headers row if row_nr is 1\n      #.....................................................................................................\n      R.push HDML.open 'tr'\n      for key in keys\n        raw_value   = row[ key ]\n        value       = raw_value\n        field       = fields[ key ] ? null\n        value       = field?.undefined ? cfg.undefined ? 'undefined' if value is undefined\n        is_done     = false\n        inner_html  = null\n        if field?\n          continue if field.display is false\n          details = { key, raw_value, row_nr, row, }\n          if field.value?\n            value = field.value value, details\n          if ( as_html = field.outer_html ? null )?\n            is_done = true\n            R.push as_html value, details\n          else if ( as_html = field.inner_html ? null )?\n            inner_html = as_html value, details\n        unless is_done\n          if inner_html?\n            R.push HDML.pair 'td', { class: key, }, inner_html\n          else\n            value = rpr value unless @types.isa.text value\n            R.push HDML.pair 'td', { class: key, }, HDML.text value\n      #.....................................................................................................\n      R.push HDML.close 'tr'\n    #.......................................................................................................\n    push_table_headers null unless has_ths\n    R.push HDML.close 'table'\n    return R.join '\\n'\n\n  #---------------------------------------------------------------------------------------------------------\n  as_subtable_html: ( cfg ) -> \"NOT YET IMPLEMENTED\"\n\n  #---------------------------------------------------------------------------------------------------------\n  _columns_from_statement: ( statement ) ->\n    ### TAINT refactor to DBay ###\n    R = {}\n    for d in statement.columns()\n      throw new Error \"^vogue-db@1^ duplicate column names not allowed\" if R[ d.name ]?\n      R[ d.name ] = d\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  _get_table_name: ( name ) ->\n    @types.validate.nonempty_text name\n    return \"_#{@cfg.prefix}_#{name[1..]}\" if name.startsWith '_'\n    return \"#{@cfg.prefix}_#{name}\"\n\n  #---------------------------------------------------------------------------------------------------------\n  _walk_datasources: -> @db SQL\"select * from #{@cfg.prefix}_datasources order by dsk;\"\n\n"
  ]
}