{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/ops1.coffee"
  ],
  "names": [],
  "mappings": "AAEA;EAAA;AAAA,MAAA,mBAAA,EAAA,SAAA,EAAA;;EACA,QAAA,GAAW,QADX;;;EAIM,sBAAN,MAAA,oBAAA,CAAA;;;;;;;IAQE,GAAK,CAAE,MAAF,EAAU,GAAV,CAAA;MACH,QAAQ,CAAC,GAAT,CAAa,SAAb,EAAwB,GAAxB;AACA,aAAO,MAAM,CAAE,GAAF;IAFV,CANP;;;;;IAYE,GAAK,CAAA,GAAE,CAAF,CAAA;MACH,QAAQ,CAAC,GAAT,CAAa,SAAb,EAAwB,CAAxB;AACA,aAAO,QAAQ,CAAC,GAAT,CAAa,GAAA,CAAb;IAFJ;;EAdP,EAJA;;;;;;;;;;;;;;;;;;;;;;;;;;;EAgDA,UAAU,CAAC,OAAX,GAAsB,IAAI,KAAJ,CAAU,OAAV,EAAmB,IAAI,mBAAJ,CAAA,CAAnB;;EACtB,UAAU,CAAC,GAAX,GAAsB,OAAO,CAAC;;EAC9B,UAAU,CAAC,CAAX,GAAsB,OAAA,CAAQ,OAAR,EAlDtB;;;;;;EAuDA,CAAC,CAAC,GAAG,CAAC,KAAN,CAAY,QAAA,CAAA,CAAA;IACV,GAAA,CAAI,eAAJ;IACA,CAAC,CAAC,IAAF,GAAS,CAAC,CAAC,GAAG,CAAC,YAAN,CAAmB,MAAnB;AACT,WAAO;EAHG,CAAZ,EAvDA;;;EA8DM,YAAN,MAAA,UAAA,CAAA;;IAGE,oBAAsB,CAAE,KAAF,CAAA;AACxB,UAAA;MAAI,QAAA,GAAY;QACV,KAAA,EAAO;UACL,IAAI,CAAC,IAAL,CAAW,KAAX;UAAkB;YAChB,CAAA,EAAc,KADE;YAEhB,CAAA,EAAc,MAFE;YAGhB,MAAA,EAAc,KAHE;YAIhB,WAAA,EAAc,CAJE;;YAMhB,KAAA,EAAc;UANE,CAAlB,CADK;;UASL,IAAI,CAAC,GAAL,CAAU,KAAV;UAAiB;YACf,CAAA,EAAc,KADC;YAEf,CAAA,EAAc,MAFC;YAGf,MAAA,EAAc,KAHC;YAIf,IAAA,EAAc,KAJC;YAKf,WAAA,EAAc;UALC,CAAjB,CATK;SADG;QAiBV,KAAA,EAAY,GAjBF;QAkBV,MAAA,EAAY,GAlBF;QAmBV,CAAA,EAAY;UAAE,KAAA,EAAO,EAAT;UAAa,MAAA,EAAQ,CAAE,CAAF,EAAK,EAAL,CAArB;UAAiC,IAAA,EAAM;QAAvC,CAnBF;QAoBV,CAAA,EAAY;UAAE,KAAA,EAAO,CAAT;UAAY,MAAA,EAAQ,CAAE,CAAF,EAAK,EAAL,CAApB;UAAgC,IAAA,EAAM,CAAtC;UAAyC,OAAA,EAAS;QAAlD,CApBF;QAqBV,UAAA,EAAY;MArBF,EAAhB;;;;;;;;;;;AAgCI,aAAO,IAAI,CAAC,IAAL,CAAU,QAAV;IAjCa;;EAHxB;;EAuCA,UAAU,CAAC,KAAX,GAAmB,IAAI,SAAJ,CAAA;;EArGnB;AAAA",
  "sourcesContent": [
    "\n\n'use strict'\n_console = console\n\n#===========================================================================================================\nclass Intercepted_console\n\n  # #---------------------------------------------------------------------------------------------------------\n  # constructor: ( target ) ->\n  #   @target = target\n  #   return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  get: ( target, key ) ->\n    _console.log '^334-1^', key\n    return target[ key ]\n    # return Reflect.get arguments...\n\n  #---------------------------------------------------------------------------------------------------------\n  log: ( P... ) ->\n    _console.log '^334-2^', P\n    return _console.log P...\n\n  # debug:            ƒ debug()\n  # error:            ƒ error()\n  # info:             ƒ info()\n  # warn:             ƒ warn()\n\n  #---------------------------------------------------------------------------------------------------------\n  # assert:           ƒ assert()\n  # clear:            ƒ clear()\n  # context:          ƒ context()\n  # count:            ƒ count()\n  # countReset:       ƒ countReset()\n  # dir:              ƒ dir()\n  # dirxml:           ƒ dirxml()\n  # group:            ƒ group()\n  # groupCollapsed:   ƒ groupCollapsed()\n  # groupEnd:         ƒ groupEnd()\n  # memory:           MemoryInfo {totalJSHeapSize: 19300000, usedJSHeapSize: 19300000, jsHeapSizeLimit: 2190000000}\n  # profile:          ƒ profile()\n  # profileEnd:       ƒ profileEnd()\n  # table:            ƒ table()\n  # time:             ƒ time()\n  # timeEnd:          ƒ timeEnd()\n  # timeLog:          ƒ timeLog()\n  # timeStamp:        ƒ timeStamp()\n  # trace:            ƒ trace()\n\nglobalThis.console  = new Proxy console, new Intercepted_console()\nglobalThis.log      = console.log\nglobalThis.µ        = require 'mudom'\n# globalThis.DATOM    = require 'datom'\n# globalThis.GUY      = require 'guy'\n# globalThis.XE       = DATOM.new_xemitter()\n# globalThis.ISOTERM  = {}\nµ.DOM.ready ->\n  log \"^65754^ ready\"\n  µ.body = µ.DOM.select_first 'body'\n  return null\n\n\n#===========================================================================================================\nclass Vogue_ops\n\n  #---------------------------------------------------------------------------------------------------------\n  sparkline_from_trend: ( trend ) ->\n    plot_cfg  = {\n      marks: [\n        Plot.line( trend, {\n          x:            'sid',\n          y:            'rank',\n          stroke:       'red',\n          strokeWidth:  4,\n          # curve:        'step' } ),\n          curve:        'linear' } ),\n          # curve:        'cardinal' } ),\n        Plot.dot( trend, {\n          x:            'sid',\n          y:            'rank',\n          stroke:       'red',\n          fill:         'red',\n          strokeWidth:  4, } ),\n        ],\n      width:      500,\n      height:     100,\n      x:          { ticks: 12, domain: [ 0, 12, ], step: 1, },\n      y:          { ticks: 4, domain: [ 0, 80, ], step: 1, reverse: true, },\n      marginLeft: 50 }\n      # color: {\n      #   type: \"linear\",\n      #   scheme: \"cividis\",\n      #   legend: true,\n      #   domain: [0, 20],\n      #   range: [0, 1] },\n      # color: {\n      #   legend: true,\n      #   width: 554,\n      #   columns: '120px', } }\n    return Plot.plot plot_cfg\n\n\nglobalThis.VOGUE = new Vogue_ops()\n# log '^ops-early@1^', { VOGUE, }\n\n\n\n"
  ]
}