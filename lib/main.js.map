{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DBAY-VOGUE'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\n( require 'mixa/lib/check-package-versions' ) require '../pinned-package-versions.json'\nPATH                      = require 'path'\ntypes                     = new ( require 'intertype' ).Intertype()\n{ isa\n  type_of\n  validate\n  validate_list_of }      = types.export()\nGUY                       = require 'guy'\n# { HTMLISH: ITXH }         = require 'intertext'\n# URL                       = require 'url'\n# { Html }                  = require './html'\n{ DBay }                  = require 'dbay'\n{ SQL }                   = DBay\n\n\n#===========================================================================================================\ntypes.declare 'constructor_cfg', tests:\n  \"@isa.object x\":                                  ( x ) -> @isa.object x\n  \"( @isa.object x.db ) or ( @isa.function x.db \":  ( x ) -> ( @isa.object x.db ) or ( @isa.function x.db )\n  \"@isa.nonempty_text x.prefix\":                    ( x ) -> @isa.nonempty_text x.prefix\n\n\n\n#===========================================================================================================\nclass @Vogue\n\n  #---------------------------------------------------------------------------------------------------------\n  @C: GUY.lft.freeze\n    defaults:\n      #.....................................................................................................\n      constructor_cfg:\n        db:               null\n        prefix:           'scr'\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( cfg ) ->\n    @cfg        = { @constructor.C.defaults.constructor_cfg..., cfg..., }\n    @cfg.db    ?= new DBay()\n    GUY.props.hide @, 'types', types\n    @types.validate.constructor_cfg @cfg\n    { db,     } = GUY.obj.pluck_with_fallback @cfg, null, 'db';     GUY.props.hide @, 'db',     db\n    { client, } = GUY.obj.pluck_with_fallback @cfg, null, 'client'; GUY.props.hide @, 'client', client\n    @cfg        = GUY.lft.freeze @cfg\n    @db.create_stdlib()\n    @_set_variables?()\n    @_create_sql_functions?()\n    @_procure_infrastructure?()\n    @_compile_sql?()\n    GUY.props.hide @, 'cache', { get_html_for: {}, }\n    return undefined\n\n  # #---------------------------------------------------------------------------------------------------------\n  # _set_variables: ->\n  #   @db.setv 'allow_change_on_mirror', 0\n\n  #---------------------------------------------------------------------------------------------------------\n  _create_sql_functions: ->\n    { prefix } = @cfg\n    #-------------------------------------------------------------------------------------------------------\n    @db.create_function\n      name:           prefix + '_get_html_for'\n      deterministic:  true\n      varargs:        false\n      call:           ( table_name, fields ) =>\n        @types.validate.nonempty_text table_name\n        @types.validate_optional.text fields\n        #...................................................................................................\n        ### TAINT use caching method, hide implementation details ###\n        unless ( method = @cache.get_html_for[ table_name ] )?\n          method_name = \"get_html_for_#{table_name}\"\n          unless ( method = @client[ method_name ] )?\n            throw new Error \"^dbay-scraper@1^ client has no method #{rpr method_name}\"\n          @cache.get_html_for[ method_name ] = method\n        #...................................................................................................\n        fields = JSON.parse fields if fields?\n        return method.call @client, fields\n    #-------------------------------------------------------------------------------------------------------\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _procure_infrastructure: ->\n    ### TAINT skip if tables found ###\n    { prefix } = @cfg\n    @db.set_foreign_keys_state false\n    @db SQL\"\"\"\n      drop table    if exists #{prefix}_datasources;\n      drop table    if exists #{prefix}_sessions;\n      drop table    if exists #{prefix}_posts;\n      drop view     if exists _#{prefix}_trends;\n      drop view     if exists #{prefix}_trends;\n      drop table    if exists #{prefix}_trends_html;\n      drop trigger  if exists #{prefix}_on_insert_into_posts;\"\"\"\n    @db.set_foreign_keys_state true\n    #-------------------------------------------------------------------------------------------------------\n    # TABLES\n    #.......................................................................................................\n    @db SQL\"\"\"\n      create table #{prefix}_datasources (\n          dsk     text not null,\n          url     text not null,\n        primary key ( dsk ) );\"\"\"\n    #.......................................................................................................\n    @db SQL\"\"\"\n      create table #{prefix}_sessions (\n          sid     integer not null,\n          dsk     text    not null,\n          ts      dt      not null,\n        primary key ( sid ),\n        foreign key ( dsk ) references #{prefix}_datasources );\"\"\"\n    #.......................................................................................................\n    @db SQL\"\"\"\n      create table #{prefix}_posts (\n          sid     integer not null,\n          pid     text    not null,\n          rank    integer not null,\n          details json    not null,\n        primary key ( sid, pid ),\n        foreign key ( sid ) references #{prefix}_sessions );\"\"\"\n    #.......................................................................................................\n    @db SQL\"\"\"\n      create table #{prefix}_tags (\n          tag     text    not null,\n        primary key ( tag ) );\"\"\"\n    #.......................................................................................................\n    @db SQL\"\"\"\n      create table #{prefix}_tagged_posts (\n          pid     text    not null,\n          tag     text    not null,\n        primary key ( pid, tag ),\n        -- foreign key ( pid ) references #{prefix}_posts ),\n        foreign key ( tag ) references #{prefix}_tags );\"\"\"\n    #.......................................................................................................\n    @db SQL\"\"\"\n      create view _#{prefix}_trends as select distinct\n          sid                                                 as sid,\n          pid                                                 as pid,\n          json_group_array( json_array( sid, rank ) ) over w  as trend\n        from #{prefix}_posts\n        window w as (\n          partition by ( pid )\n          order by rank\n          range between unbounded preceding and current row\n          );\"\"\"\n    #.......................................................................................................\n    @db SQL\"\"\"\n      create view #{prefix}_trends as select\n          sessions.dsk                                        as dsk,\n          sessions.sid                                        as sid,\n          sessions.ts                                         as ts,\n          posts.pid                                           as pid,\n          posts.rank                                          as rank,\n          trends.trend                                        as trend,\n          posts.details                                       as details\n        from #{prefix}_posts        as posts\n        join #{prefix}_sessions     as sessions     using ( sid )\n        join _#{prefix}_trends      as trends       using ( sid, pid )\n        order by\n          sid   desc,\n          rank  asc;\"\"\"\n    #.......................................................................................................\n    @db SQL\"\"\"\n      create table #{prefix}_trends_html (\n          nr        integer not null primary key,\n          sid       integer not null,\n          html      text    not null,\n        foreign key ( sid ) references #{prefix}_sessions );\"\"\"\n    #.......................................................................................................\n    @db SQL\"\"\"\n      create trigger #{prefix}_on_insert_into_posts after insert on #{prefix}_posts\n        for each row begin\n          insert into #{prefix}_trends_html ( sid, html )\n            select\n                sid,\n                #{prefix}_get_html_for( 'trends', json_object(\n                  'dsk',      dsk,\n                  'sid',      sid,\n                  'ts',       ts,\n                  'pid',      pid,\n                  'rank',     rank,\n                  'trend',    trend,\n                  'details',  new.details ) )\n              from #{prefix}_trends as trends\n              where ( trends.sid = new.sid ) and ( trends.pid = new.pid );\n          end;\"\"\"\n    #.......................................................................................................\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _compile_sql: ->\n    { prefix } = @cfg\n    #.......................................................................................................\n    GUY.props.hide @, 'queries',\n      # #.....................................................................................................\n      # get_db_object_count: @db.prepare SQL\"\"\"\n      #   select count(*) as count from sqlite_schema where starts_with( $name, $prefix || '_' );\"\"\"\n      #.....................................................................................................\n      insert_datasource:  @db.prepare_insert { into: \"#{prefix}_datasources\", }\n      #.....................................................................................................\n      insert_session:       @db.prepare SQL\"\"\"\n        with next_free as ( select\n            coalesce( max( sid ), 0 ) + 1 as sid\n          from #{prefix}_sessions )\n        insert into #{prefix}_sessions ( sid, dsk, ts )\n          select sid, $dsk, std_dt_now() from next_free\n          returning *;\"\"\"\n      #.....................................................................................................\n      insert_post:        @db.prepare SQL\"\"\"\n        with next_free as ( select\n            coalesce( max( rank ), 0 ) + 1 as rank\n          from #{prefix}_posts\n          where true\n            and ( sid = $sid ) )\n        insert into #{prefix}_posts ( sid, pid, rank, details )\n          select $sid, $pid, next_free.rank, $details from next_free\n          returning *;\"\"\"\n    #.......................................................................................................\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  new_session:  ( dsk     ) -> @db.first_row @queries.insert_session, { dsk, }\n  new_post:     ( fields  ) -> @db.first_row @queries.insert_post, fields\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  ]
}