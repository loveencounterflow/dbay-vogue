{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DBAY-SCRAPER'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\n( require 'mixa/lib/check-package-versions' ) require '../pinned-package-versions.json'\nPATH                      = require 'path'\ntypes                     = new ( require 'intertype' ).Intertype()\n{ isa\n  type_of\n  validate\n  validate_list_of }      = types.export()\nGUY                       = require 'guy'\n# { HTMLISH: ITXH }         = require 'intertext'\n# URL                       = require 'url'\n# { Html }                  = require './html'\n{ DBay }                  = require 'dbay'\n{ SQL }                   = DBay\n\n\n#===========================================================================================================\ntypes.declare 'constructor_cfg', tests:\n  \"@isa.object x\":                                  ( x ) -> @isa.object x\n  \"( @isa.object x.db ) or ( @isa.function x.db \":  ( x ) -> ( @isa.object x.db ) or ( @isa.function x.db )\n  \"@isa.nonempty_text x.prefix\":                    ( x ) -> @isa.nonempty_text x.prefix\n\n\n\n#===========================================================================================================\nclass @Scraper\n\n  #---------------------------------------------------------------------------------------------------------\n  @C: GUY.lft.freeze\n    defaults:\n      #.....................................................................................................\n      constructor_cfg:\n        db:               null\n        prefix:           'scr'\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( cfg ) ->\n    @cfg      = { @constructor.C.defaults.constructor_cfg..., cfg..., }\n    @cfg.db  ?= new DBay()\n    GUY.props.hide @, 'types', types\n    @types.validate.constructor_cfg @cfg\n    { db, } = GUY.obj.pluck_with_fallback @cfg, null, 'db'\n    GUY.props.hide @, 'db', db\n    @cfg    = GUY.lft.freeze @cfg\n    @db.create_stdlib()\n    @_set_variables?()\n    @_create_sql_functions?()\n    @_procure_infrastructure?()\n    @_compile_sql?()\n    return undefined\n\n  # #---------------------------------------------------------------------------------------------------------\n  # _set_variables: ->\n  #   @db.setv 'allow_change_on_mirror', 0\n\n  #---------------------------------------------------------------------------------------------------------\n  _create_sql_functions: ->\n    { prefix } = @cfg\n    #-------------------------------------------------------------------------------------------------------\n    @db.create_function\n      name:           prefix + '_get_rskey'\n      deterministic:  true\n      varargs:        false\n      call:           ( round, seq ) -> \"#{round}:#{seq}\"\n    #-------------------------------------------------------------------------------------------------------\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _procure_infrastructure: ->\n    ### TAINT skip if tables found ###\n    { prefix } = @cfg\n    @db.set_foreign_keys_state false\n    @db SQL\"\"\"\n      drop table  if exists #{prefix}_datasources;\"\"\"\n    @db.set_foreign_keys_state true\n    #-------------------------------------------------------------------------------------------------------\n    # TABLES\n    #.......................................................................................................\n    @db SQL\"\"\"\n      create table #{prefix}_datasources (\n          dsk     text not null,\n          url     text not null,\n        primary key ( dsk ) );\"\"\"\n    #.......................................................................................................\n    @db SQL\"\"\"\n      create table #{prefix}_rounds (\n          round   integer not null,\n          ts      dt      not null,\n        primary key ( round ) );\"\"\"\n    #.......................................................................................................\n    @db SQL\"\"\"\n      create table #{prefix}_posts (\n          dsk     text    not null,\n          id      text    not null,\n          round   integer not null,\n          seq     integer not null,\n          d       json    not null,\n        primary key ( dsk, id, round ),\n        foreign key ( dsk ) references #{prefix}_datasources );\"\"\"\n    #.......................................................................................................\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _compile_sql: ->\n    { prefix } = @cfg\n    #.......................................................................................................\n    GUY.props.hide @, 'queries',\n      # #.....................................................................................................\n      # get_db_object_count: @db.prepare SQL\"\"\"\n      #   select count(*) as count from sqlite_schema where starts_with( $name, $prefix || '_' );\"\"\"\n      #.....................................................................................................\n      insert_datasource:  @db.prepare_insert { into: \"#{prefix}_datasources\", }\n      #.....................................................................................................\n      insert_round:       @db.prepare SQL\"\"\"\n        with next_free as ( select\n            coalesce( max( round ), 0 ) + 1 as round\n          from #{prefix}_rounds )\n        insert into #{prefix}_rounds ( round, ts )\n          select round, std_dt_now() from next_free\n          returning *;\"\"\"\n      #.....................................................................................................\n      insert_post:        @db.prepare SQL\"\"\"\n        with next_free as ( select\n            coalesce( max( seq ), 0 ) + 1 as seq\n          from #{prefix}_posts\n          where true\n            and ( dsk   = $dsk    )\n            and ( round = $round  ) )\n        insert into #{prefix}_posts ( dsk, id, round, seq, d )\n          select $dsk, $id, $round, next_free.seq, $d from next_free\n          returning *;\"\"\"\n    #.......................................................................................................\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  new_round:            -> @db.first_row @queries.insert_round\n  new_post: ( fields )  -> @db.first_row @queries.insert_post, fields\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  ]
}