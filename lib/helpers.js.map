{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/helpers.coffee"
  ],
  "names": [],
  "mappings": "AAEA;EAAA;AAAA,MAAA,GAAA,EAAA,IAAA,EAAA,GAAA,EAAA,MAAA,EAAA,KAAA,EAAA,KAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,EAAA,EAAA,GAAA,EAAA,QAAA,EAAA,IAAA,EAAA,IAAA,EAAA,OAAA,EAAA,QAAA;;;EAKA,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,GAAA,GAA4B,GAAG,CAAC;;EAChC,KAAA,GAA4B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,OAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,SAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,IAAI,CAAC,IAAT,CAAc,GAAd;;EAC5B,CAAA,CAAE,EAAF,EACE,MADF,CAAA,GAC4B,GAD5B,EAfA;;;EAkBA,IAAA,GAA4B,OAAA,CAAQ,MAAR;;EAC5B,CAAA,CAAE,QAAF,EACE,QADF,CAAA,GAC4B,OAAA,CAAQ,UAAR,CAD5B;;EAEA,CAAA,CAAE,GAAF,CAAA,GAA4B,OAAA,CAAQ,mBAAR,CAA5B;;EACA,IAAA,GAA4B,IAAI,GAAJ,CAAQ;IAAE,GAAA,EAAK,CAAA;EAAP,CAAR,EAtB5B;;;;;;;;;;;;;;;;;EAwCA,IAAC,CAAA,MAAD,GAAU,QAAA,CAAE,KAAF,CAAA;IACR,IAAA,CAAK,GAAG,CAAC,OAAJ,CAAY,GAAG,CAAC,KAAJ,CAAU,QAAA,CAAW,GAAA,GAAM,KAAN,GAAc,GAAzB,EAAgC,GAAhC,CAAV,CAAZ,CAAL;AACA,WAAO;EAFC,EAxCV;;;EA6CA,IAAC,CAAA,QAAD,GAAY,QAAA,CAAE,KAAF,EAAS,KAAT,CAAA;IACV,IAAiB,aAAjB;MAAA,IAAC,CAAA,MAAD,CAAQ,KAAR,EAAA;;IACA,IAAA,CAAK,IAAI,CAAC,SAAL,CAAe,KAAf,CAAL;AACA,WAAO;EAHG;AA7CZ",
  "sourcesContent": [
    "\n\n'use strict'\n\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'HELPERS'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n{ jr\n  assign }                = CND\n#...........................................................................................................\nPATH                      = require 'path'\n{ width_of\n  to_width }              = require 'to-width'\n{ Tbl, }                  = require 'icql-dba-tabulate'\ndtab                      = new Tbl { dba: {}, }\n\n\n#===========================================================================================================\n#\n# #-----------------------------------------------------------------------------------------------------------\n# @cwd_abspath              = CND.cwd_abspath\n# @cwd_relpath              = CND.cwd_relpath\n# @here_abspath             = CND.here_abspath\n# @_drop_extension          = ( path ) => path[ ... path.length - ( PATH.extname path ).length ]\n# @project_abspath          = ( P... ) => CND.here_abspath __dirname, '..', P...\n\n# #-----------------------------------------------------------------------------------------------------------\n# @badge_from_filename = ( filename ) ->\n#   basename  = PATH.basename filename\n#   return 'BENCHMARKS/' + ( basename .replace /^(.*?)\\.[^.]+$/, '$1' ).toUpperCase()\n\n#-----------------------------------------------------------------------------------------------------------\n@banner = ( title ) ->\n  echo CND.reverse CND.steel to_width ( ' ' + title + ' ' ), 108\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@tabulate = ( title, query ) ->\n  @banner title if title?\n  echo dtab._tabulate query\n  return null\n"
  ]
}