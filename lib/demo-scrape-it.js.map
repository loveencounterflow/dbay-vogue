{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/demo-scrape-it.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'ISOTERM/CLI'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\ntypes                     = new ( require 'intertype' ).Intertype()\n#...........................................................................................................\n( require 'mixa/lib/check-package-versions' ) require '../pinned-package-versions.json'\nPATH                      = require 'path'\nFS                        = require 'fs'\ngot                       = require 'got'\nCHEERIO                   = require 'cheerio'\nH                         = require './helpers'\nGUY                       = require 'guy'\n{ Scraper, }              = require './main'\n{ DBay }                  = require 'dbay'\n{ SQL }                   = DBay\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\ntypes.declare 'scraper_html_or_buffer', tests:\n  # \"@isa.object x\":                        ( x ) -> @isa.object x\n  \"@type_of x in [ 'text', 'buffer', ]\":  ( x ) -> @type_of x in [ 'text', 'buffer', ]\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\ndemo_1 = ->\n  url       = 'https://ionicabizau.net'\n  elements  =\n    title:  \".header h1\"\n    desc:   \".header h2\"\n    avatar:\n      selector: \".header img\"\n      attr:     \"src\"\n  { data, response, } = await scrape_it url, elements\n  info \"Status Code: ${response.statusCode}\"\n  urge data\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_zvg_online_net = ->\n  url       = 'https://www.zvg-online.net/1400/1101986118/ag_seite_001.php'\n  elements  =\n    # containers: '.container_vors a'\n    containers:\n      listItem: '.container_vors'\n      data:\n        listing:\n          listItem: 'a'\n  encoding  = 'latin1'\n  #.........................................................................................................\n  buffer    = await got url\n  html      = buffer.rawBody.toString encoding\n  d         = await scrape_it.scrapeHTML html, elements\n  # info \"Status Code: #{response.statusCode}\"\n  for container, idx in d.containers\n    urge '^74443^', idx, rpr container.listing\n    R = []\n    for line in container.listing\n      unless ( match = line.match /^(?<key>[^:]*):(?<value>.*)$/ )?\n        help '^3453^', rpr line\n        R.push { key: './.', value: line, }\n        continue\n      { key, value, } = match.groups\n      key             = key.trim()\n      value           = value.trim()\n      R.push { key, value, }\n    console.table R\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_zvg24_net = ->\n  url       = 'https://www.zvg24.net/zwangsversteigerung/brandenburg'\n  elements  =\n    # containers: '.container_vors a'\n    containers:\n      listItem: 'article'\n  #     data:\n  #       listing:\n  #         listItem: 'a'\n  encoding  = 'utf8'\n  #.........................................................................................................\n  # buffer    = await got url\n  # html      = buffer.rawBody.toString encoding\n  buffer    = FS.readFileSync PATH.join __dirname, '../sample-data/www.zvg24.net_,_zwangsversteigerung_,_brandenburg.html'\n  html      = buffer.toString encoding\n  d         = await scrape_it.scrapeHTML html, elements\n  # info \"Status Code: #{response.statusCode}\"\n  for text, idx in d.containers\n    lines = text.split /\\s*\\n\\s*/\n    # text = text.replace /\\x20+/g, ' '\n    # text = text.replace /\\n\\x20\\n/g, '\\n'\n    # text = text.replace /\\n+/g, '\\n'\n    # text = text.replace /Musterbild\\n/g, ''\n    lines = ( line for line in lines when line isnt 'Musterbild' )\n    urge '^74443^', idx, rpr lines\n    # urge '^74443^', idx, rpr container.replace /\\n+/g, '\\n'\n    # R = []\n    # for line in container.listing\n    #   unless ( match = line.match /^(?<key>[^:]*):(?<value>.*)$/ )?\n    #     help '^3453^', rpr line\n    #     R.push { key: './.', value: line, }\n    #     continue\n    #   { key, value, } = match.groups\n    #   key             = key.trim()\n    #   value           = value.trim()\n    #   R.push { key, value, }\n    # console.table R\n  return null\n\n\n#===========================================================================================================\nclass Hnrss\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( cfg ) ->\n    ### TAINT encoding, url are not configurables ###\n    defaults  = { encoding: 'utf-8', }\n    @cfg      = GUY.lft.freeze { defaults..., cfg..., }\n    GUY.props.hide @, 'scr', new Scraper()\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  _remove_cdata: ( text ) -> text.replace /^<!\\[CDATA\\[(.*)\\]\\]>$/, '$1'\n\n  #---------------------------------------------------------------------------------------------------------\n  _article_url_from_description: ( description ) ->\n    if ( match = description.match /Article URL:\\s*(?<article_url>[^\\s]+)/ )?\n      return match.groups.article_url\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _html_from_html_or_buffer: ( html_or_buffer ) ->\n    types.validate.scraper_html_or_buffer html_or_buffer\n    if ( types.type_of html_or_buffer ) is 'buffer'\n      return html_or_buffer.toString @cfg.encoding\n    return html_or_buffer\n\n  #---------------------------------------------------------------------------------------------------------\n  scrape: ->\n    url       = 'https://hnrss.org/newest?link=comments'\n    encoding  = 'utf8'\n    buffer    = await got url\n    return @scrape_html buffer.rawBody\n\n  #---------------------------------------------------------------------------------------------------------\n  scrape_html: ( html_or_buffer ) ->\n    { round, }  = @scr.new_round()\n    insert_post = @scr.queries.insert_post\n    dsk         = 'hn'\n    seen        = @scr.db.dt_now()\n    #.......................................................................................................\n    html        = @_html_from_html_or_buffer html_or_buffer\n    #.......................................................................................................\n    ### NOTE This is RSS XML, so `link` doesn't behave like HTML `link` and namespaces are not supported: ###\n    html        = html.replace /<dc:creator>/g,   '<creator>'\n    html        = html.replace /<\\/dc:creator>/g, '</creator>'\n    html        = html.replace /<link>/g,         '<reserved-link>'\n    html        = html.replace /<\\/link>/g,       '</reserved-link>'\n    #.......................................................................................................\n    $           = CHEERIO.load html\n    R           = []\n    # debug types.type_of $ 'item'\n    # debug ( $ 'item' ).html()\n    # debug ( $ 'item' ).each\n    # debug ( $ 'item' ).forEach\n    #.......................................................................................................\n    for item in ( $ 'item' )\n      item            = $ item\n      #.....................................................................................................\n      title           = item.find 'title'\n      title           = title.text()\n      title           = @_remove_cdata title\n      title           = title.trim()\n      #.....................................................................................................\n      discussion_url  = item.find 'reserved-link'\n      discussion_url  = discussion_url.text()\n      id              = discussion_url.replace /^.*item\\?id=([0-9]+)$/, 'hn-$1'\n      #.....................................................................................................\n      date            = item.find 'pubDate'\n      date            = date.text()\n      #.....................................................................................................\n      creator         = item.find 'creator'\n      creator         = creator.text()\n      #.....................................................................................................\n      description     = item.find 'description'\n      description     = description.text()\n      description     = @_remove_cdata description\n      article_url     = @_article_url_from_description description\n      #.....................................................................................................\n      href    = null\n      R.push { id, title, date, creator, discussion_url, article_url, }\n      ### TAINT avoid duplicate query ###\n      d   = { title, discussion_url, date, creator, description, }\n      d   = JSON.stringify d\n      row = @scr.new_post { dsk, id, round, d, }\n    #.......................................................................................................\n    # H.tabulate \"Hacker News\", R\n    H.tabulate \"Hacker News\", @scr.db SQL\"\"\"select\n        dsk                     as dsk,\n        id                      as id,\n        round                   as round,\n        seq                     as seq,\n        substring( d, 1, 100 )  as d\n      from scr_posts\n      where true\n        -- and ( seq < 10 )\n      order by round, seq;\"\"\"\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_hnrss = ->\n  # #.........................................................................................................\n  # do =>\n  #   scraper   = new Hnrss()\n  #   await scraper.scrape()\n  hnrss   = new Hnrss()\n  # H.tabulate \"scr\", hnrss.scr.db SQL\"select * from sqlite_schema;\"\n  hnrss.scr.queries.insert_datasource.run { dsk: 'hn', url: 'http://nourl', }\n  #.........................................................................................................\n  await do =>\n    buffer    = FS.readFileSync PATH.join __dirname, '../sample-data/hnrss.org_,_newest.001.xml'\n    await hnrss.scrape_html buffer\n  #.........................................................................................................\n  await do =>\n    buffer    = FS.readFileSync PATH.join __dirname, '../sample-data/hnrss.org_,_newest.002.xml'\n    await hnrss.scrape_html buffer\n  #.........................................................................................................\n  await do =>\n    buffer    = FS.readFileSync PATH.join __dirname, '../sample-data/hnrss.org_,_newest.003.xml'\n    await hnrss.scrape_html buffer\n  #.........................................................................................................\n  await do =>\n    buffer    = FS.readFileSync PATH.join __dirname, '../sample-data/hnrss.org_,_newest.004.xml'\n    await hnrss.scrape_html buffer\n  #.........................................................................................................\n  H.tabulate \"progressions\", hnrss.scr.db SQL\"\"\"select * from scr_progressions order by id;\"\"\"\n  H.tabulate \"progressions\", hnrss.scr.db SQL\"\"\"\n    select\n        dsk                                           as dsk,\n        id                                            as id,\n        round                                         as round,\n        seq                                           as seq,\n        seqs                                          as seqs,\n        substring( d, 1, 30 )                         as d\n      from scr_posts_and_progressions order by\n        round desc,\n        seq;\"\"\"\n  #.........................................................................................................\n  return null\n\n\n############################################################################################################\nif module is require.main then do =>\n  # await demo_zvg_online_net()\n  # await demo_zvg24_net()\n  await demo_hnrss()\n  # await demo_oanda_com_jsdom()\n  # f()"
  ]
}