{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/demo-scrape-it.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'ISOTERM/CLI'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\ntypes                     = new ( require 'intertype' ).Intertype()\n{ isa\n  validate\n  type_of }               = types.export()\n#...........................................................................................................\n( require 'mixa/lib/check-package-versions' ) require '../pinned-package-versions.json'\nPATH                      = require 'path'\nFS                        = require 'fs'\ngot                       = require 'got'\nCHEERIO                   = require 'cheerio'\nH                         = require './helpers'\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_1 = ->\n  url       = 'https://ionicabizau.net'\n  elements  =\n    title:  \".header h1\"\n    desc:   \".header h2\"\n    avatar:\n      selector: \".header img\"\n      attr:     \"src\"\n  { data, response, } = await scrape_it url, elements\n  info \"Status Code: ${response.statusCode}\"\n  urge data\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_zvg_online_net = ->\n  url       = 'https://www.zvg-online.net/1400/1101986118/ag_seite_001.php'\n  elements  =\n    # containers: '.container_vors a'\n    containers:\n      listItem: '.container_vors'\n      data:\n        listing:\n          listItem: 'a'\n  encoding  = 'latin1'\n  #.........................................................................................................\n  buffer    = await got url\n  html      = buffer.rawBody.toString encoding\n  d         = await scrape_it.scrapeHTML html, elements\n  # info \"Status Code: #{response.statusCode}\"\n  for container, idx in d.containers\n    urge '^74443^', idx, rpr container.listing\n    R = []\n    for line in container.listing\n      unless ( match = line.match /^(?<key>[^:]*):(?<value>.*)$/ )?\n        help '^3453^', rpr line\n        R.push { key: './.', value: line, }\n        continue\n      { key, value, } = match.groups\n      key             = key.trim()\n      value           = value.trim()\n      R.push { key, value, }\n    console.table R\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_zvg24_net = ->\n  url       = 'https://www.zvg24.net/zwangsversteigerung/brandenburg'\n  elements  =\n    # containers: '.container_vors a'\n    containers:\n      listItem: 'article'\n  #     data:\n  #       listing:\n  #         listItem: 'a'\n  encoding  = 'utf8'\n  #.........................................................................................................\n  # buffer    = await got url\n  # html      = buffer.rawBody.toString encoding\n  buffer    = FS.readFileSync PATH.join __dirname, '../sample-data/www.zvg24.net_,_zwangsversteigerung_,_brandenburg.html'\n  html      = buffer.toString encoding\n  d         = await scrape_it.scrapeHTML html, elements\n  # info \"Status Code: #{response.statusCode}\"\n  for text, idx in d.containers\n    lines = text.split /\\s*\\n\\s*/\n    # text = text.replace /\\x20+/g, ' '\n    # text = text.replace /\\n\\x20\\n/g, '\\n'\n    # text = text.replace /\\n+/g, '\\n'\n    # text = text.replace /Musterbild\\n/g, ''\n    lines = ( line for line in lines when line isnt 'Musterbild' )\n    urge '^74443^', idx, rpr lines\n    # urge '^74443^', idx, rpr container.replace /\\n+/g, '\\n'\n    # R = []\n    # for line in container.listing\n    #   unless ( match = line.match /^(?<key>[^:]*):(?<value>.*)$/ )?\n    #     help '^3453^', rpr line\n    #     R.push { key: './.', value: line, }\n    #     continue\n    #   { key, value, } = match.groups\n    #   key             = key.trim()\n    #   value           = value.trim()\n    #   R.push { key, value, }\n    # console.table R\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\nremove_cdata = ( text ) -> text.replace /^<!\\[CDATA\\[(.*)\\]\\]>$/, '$1'\narticle_url_from_description = ( description ) ->\n  debug '^342342^', rpr description\n  if ( match = description.match /Article URL:\\s*(?<article_url>[^\\s]+)/ )?\n    return match.groups.article_url\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\ndemo_oanda_com = ->\n  url       = 'https://www.zvg24.net/zwangsversteigerung/brandenburg'\n  elements  =\n    containers:\n      listItem: '.rate_row'\n  #     data:\n  #       listing:\n  #         listItem: 'a'\n  encoding  = 'utf8'\n  #.........................................................................................................\n  # buffer    = await got url\n  # html      = buffer.rawBody.toString encoding\n  buffer    = FS.readFileSync PATH.join __dirname, '../sample-data/hnrss.org_,_newest.xml'\n  html      = buffer.toString encoding\n  #.........................................................................................................\n  ### NOTE This is RSS XML, so `link` doesn't behave like HTML `link` and namespaces are not supported: ###\n  html      = html.replace /<dc:creator>/g,   '<creator>'\n  html      = html.replace /<\\/dc:creator>/g, '</creator>'\n  html      = html.replace /<link>/g,         '<reserved-link>'\n  html      = html.replace /<\\/link>/g,       '</reserved-link>'\n  #.........................................................................................................\n  $         = CHEERIO.load html\n  R         = []\n  # debug type_of $ 'item'\n  # debug ( $ 'item' ).html()\n  # debug ( $ 'item' ).each\n  # debug ( $ 'item' ).forEach\n  #.........................................................................................................\n  for item in ( $ 'item' )\n    item            = $ item\n    #.......................................................................................................\n    title           = item.find 'title'\n    title           = title.text()\n    title           = remove_cdata title\n    title           = title.trim()\n    #.......................................................................................................\n    discussion_url  = item.find 'reserved-link'\n    discussion_url  = discussion_url.text()\n    #.......................................................................................................\n    date            = item.find 'pubDate'\n    date            = date.text()\n    #.......................................................................................................\n    creator         = item.find 'creator'\n    creator         = creator.text()\n    #.......................................................................................................\n    description     = item.find 'description'\n    description     = description.text()\n    description     = remove_cdata description\n    article_url     = article_url_from_description description\n    #.......................................................................................................\n    href    = null\n    R.push { title, date, creator, discussion_url, article_url, }\n  #.........................................................................................................\n  H.tabulate \"Hacker News\", R\n  return null\n\n\n############################################################################################################\nif module is require.main then do =>\n  # await demo_zvg_online_net()\n  # await demo_zvg24_net()\n  await demo_oanda_com()\n  # await demo_oanda_com_jsdom()\n  # f()"
  ]
}